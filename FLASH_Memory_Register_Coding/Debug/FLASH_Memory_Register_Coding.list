
FLASH_Memory_Register_Coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000057c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000704  0800070c  0001070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000704  08000704  00010704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0001070c  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001070c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000100c  00000000  00000000  0001073c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000003cd  00000000  00000000  00011748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000120  00000000  00000000  00011b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00011c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000754  00000000  00000000  00011d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000a86  00000000  00000000  00012474  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00012efa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000320  00000000  00000000  00012f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006ec 	.word	0x080006ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006ec 	.word	0x080006ec

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <main>:
uint32_t Flash_Read(uint32_t address);

uint32_t var;

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	CLK_Config();
 8000200:	f000 f81a 	bl	8000238 <CLK_Config>
	Led_Config();
 8000204:	f000 f86c 	bl	80002e0 <Led_Config>
	Flash_Unlock();
 8000208:	f000 f8a2 	bl	8000350 <Flash_Unlock>
	Flash_Erase_Sector(2);
 800020c:	2002      	movs	r0, #2
 800020e:	f000 f8db 	bl	80003c8 <Flash_Erase_Sector>
	Flash_Write(sector2,0xAB);
 8000212:	21ab      	movs	r1, #171	; 0xab
 8000214:	4806      	ldr	r0, [pc, #24]	; (8000230 <main+0x34>)
 8000216:	f000 f8ff 	bl	8000418 <Flash_Write>
	Flash_Lock();
 800021a:	f000 f8bf 	bl	800039c <Flash_Lock>
	var = Flash_Read(sector2);
 800021e:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x34>)
 8000220:	f000 f91e 	bl	8000460 <Flash_Read>
 8000224:	4602      	mov	r2, r0
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <main+0x38>)
 8000228:	601a      	str	r2, [r3, #0]
	Flash_Lock();
 800022a:	f000 f8b7 	bl	800039c <Flash_Lock>

  while (1)
 800022e:	e7fe      	b.n	800022e <main+0x32>
 8000230:	08008000 	.word	0x08008000
 8000234:	2000001c 	.word	0x2000001c

08000238 <CLK_Config>:
  }
}


void CLK_Config() // Clock speed for 168MHz
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000;                 // HSEON ENABLE
 800023c:	4a27      	ldr	r2, [pc, #156]	; (80002dc <CLK_Config+0xa4>)
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <CLK_Config+0xa4>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000246:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));        // HSEON Ready Flag wait
 8000248:	bf00      	nop
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <CLK_Config+0xa4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <CLK_Config+0x12>
	RCC->CR |= 0x00080000;              // CSS ENABLE
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <CLK_Config+0xa4>)
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <CLK_Config+0xa4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000260:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000;				// PLL ON
 8000262:	4a1e      	ldr	r2, [pc, #120]	; (80002dc <CLK_Config+0xa4>)
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <CLK_Config+0xa4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800026c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;        // PLL SRC HSE is selected
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <CLK_Config+0xa4>)
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <CLK_Config+0xa4>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000278:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;       // PLL M 4
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <CLK_Config+0xa4>)
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <CLK_Config+0xa4>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;        // PLL N 168
 8000286:	4a15      	ldr	r2, [pc, #84]	; (80002dc <CLK_Config+0xa4>)
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <CLK_Config+0xa4>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000290:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;       // PLL P 2
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <CLK_Config+0xa4>)
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <CLK_Config+0xa4>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;          // AHB PRESCALER 1
 800029a:	4a10      	ldr	r2, [pc, #64]	; (80002dc <CLK_Config+0xa4>)
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <CLK_Config+0xa4>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;          // APB2 PRESCALER 2
 80002a2:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <CLK_Config+0xa4>)
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <CLK_Config+0xa4>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ac:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;          // APB1 PRESCALER 4
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <CLK_Config+0xa4>)
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <CLK_Config+0xa4>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002b8:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;             // HSE READY FLAG CLEAR
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <CLK_Config+0xa4>)
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <CLK_Config+0xa4>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002c4:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;             // CSS FLAG CLEAR
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <CLK_Config+0xa4>)
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <CLK_Config+0xa4>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002d0:	60d3      	str	r3, [r2, #12]
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800

080002e0 <Led_Config>:

void Led_Config(void)  // User led configuration
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x1U << 3U; // D port clock enable
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <Led_Config+0x3c>)
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <Led_Config+0x3c>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= 0x55000000; // pins D12, D13, D14, D15 is selected output mode
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <Led_Config+0x40>)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <Led_Config+0x40>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= 0xFF000000; // very high speed is selected
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <Led_Config+0x40>)
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <Led_Config+0x40>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000306:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR |= 0x00000000; // no pull up, pull down
 8000308:	4a05      	ldr	r2, [pc, #20]	; (8000320 <Led_Config+0x40>)
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <Led_Config+0x40>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020c00 	.word	0x40020c00

08000324 <FLASH_IRQHandler>:

void FLASH_IRQHandler()
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	GPIOD->ODR = 0x0000F000;  						 // pins set
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <FLASH_IRQHandler+0x24>)
 800032a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800032e:	615a      	str	r2, [r3, #20]
	FLASH->SR |= (1 << 0);						     // clear interrupt flag
 8000330:	4a06      	ldr	r2, [pc, #24]	; (800034c <FLASH_IRQHandler+0x28>)
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <FLASH_IRQHandler+0x28>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	60d3      	str	r3, [r2, #12]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40020c00 	.word	0x40020c00
 800034c:	40023c00 	.word	0x40023c00

08000350 <Flash_Unlock>:

void Flash_Unlock(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while((FLASH->SR & flash_busy_flag) != 0);
 8000354:	bf00      	nop
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <Flash_Unlock+0x40>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800035e:	2b00      	cmp	r3, #0
 8000360:	d1f9      	bne.n	8000356 <Flash_Unlock+0x6>
	FLASH->KEYR |= key1;
 8000362:	490b      	ldr	r1, [pc, #44]	; (8000390 <Flash_Unlock+0x40>)
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <Flash_Unlock+0x40>)
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <Flash_Unlock+0x44>)
 800036a:	4313      	orrs	r3, r2
 800036c:	604b      	str	r3, [r1, #4]
	FLASH->KEYR |= key2;
 800036e:	4908      	ldr	r1, [pc, #32]	; (8000390 <Flash_Unlock+0x40>)
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <Flash_Unlock+0x40>)
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <Flash_Unlock+0x48>)
 8000376:	4313      	orrs	r3, r2
 8000378:	604b      	str	r3, [r1, #4]
	FLASH->CR |= flash_EOPIE;
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <Flash_Unlock+0x40>)
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <Flash_Unlock+0x40>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000384:	6113      	str	r3, [r2, #16]
	NVIC_EnableIRQ(FLASH_IRQn);				// Enable nested vector interrupt for FLASH interrupt
 8000386:	2004      	movs	r0, #4
 8000388:	f7ff ff1e 	bl	80001c8 <NVIC_EnableIRQ>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40023c00 	.word	0x40023c00
 8000394:	45670123 	.word	0x45670123
 8000398:	cdef89ab 	.word	0xcdef89ab

0800039c <Flash_Lock>:

void Flash_Lock(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	while((FLASH->SR & flash_busy_flag) != 0);
 80003a0:	bf00      	nop
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <Flash_Lock+0x28>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1f9      	bne.n	80003a2 <Flash_Lock+0x6>
	FLASH->CR |= lock;
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <Flash_Lock+0x28>)
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <Flash_Lock+0x28>)
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003b8:	6113      	str	r3, [r2, #16]
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40023c00 	.word	0x40023c00

080003c8 <Flash_Erase_Sector>:

void Flash_Erase_Sector(uint8_t sectorx)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	while((FLASH->SR & flash_busy_flag) != 0);
 80003d2:	bf00      	nop
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1f9      	bne.n	80003d4 <Flash_Erase_Sector+0xc>
	FLASH->CR |= (1 << 1);					// sector erase activated
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6113      	str	r3, [r2, #16]
	FLASH->CR |= (sectorx << 3);			// SNB reigister
 80003ec:	4909      	ldr	r1, [pc, #36]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	00d2      	lsls	r2, r2, #3
 80003f6:	4313      	orrs	r3, r2
 80003f8:	610b      	str	r3, [r1, #16]
	FLASH->CR |= (1 << 16);					// STRT bit This bit triggers an erase operation when set. It is set only by software and cleared when the BSY bit is cleared.
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <Flash_Erase_Sector+0x4c>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000404:	6113      	str	r3, [r2, #16]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40023c00 	.word	0x40023c00

08000418 <Flash_Write>:

void Flash_Write(uint32_t address, uint32_t data)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	while((FLASH->SR & flash_busy_flag) != 0);
 8000422:	bf00      	nop
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <Flash_Write+0x44>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f9      	bne.n	8000424 <Flash_Write+0xc>
	FLASH->CR |= (2 << 8);					// program size x32
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <Flash_Write+0x44>)
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <Flash_Write+0x44>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= (1 << 0);					// flash programming activated
 800043c:	4a07      	ldr	r2, [pc, #28]	; (800045c <Flash_Write+0x44>)
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <Flash_Write+0x44>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6113      	str	r3, [r2, #16]
	*(uint32_t*)address = data;				// to write the data to the address
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	601a      	str	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40023c00 	.word	0x40023c00

08000460 <Flash_Read>:

uint32_t Flash_Read(uint32_t address)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	while((FLASH->SR & flash_busy_flag) != 0);
 8000468:	bf00      	nop
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <Flash_Read+0x2c>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f9      	bne.n	800046a <Flash_Read+0xa>
	uint32_t read_data;
	read_data = *(uint32_t*)address;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	60fb      	str	r3, [r7, #12]
	return read_data;
 800047c:	68fb      	ldr	r3, [r7, #12]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023c00 	.word	0x40023c00

08000490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000496:	e003      	b.n	80004a0 <LoopCopyDataInit>

08000498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800049a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800049c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800049e:	3104      	adds	r1, #4

080004a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004a8:	d3f6      	bcc.n	8000498 <CopyDataInit>
  ldr  r2, =_sbss
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004ac:	e002      	b.n	80004b4 <LoopFillZerobss>

080004ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004b0:	f842 3b04 	str.w	r3, [r2], #4

080004b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004b8:	d3f9      	bcc.n	80004ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ba:	f000 f841 	bl	8000540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004be:	f000 f8f1 	bl	80006a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c2:	f7ff fe9b 	bl	80001fc <main>
  bx  lr    
 80004c6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004cc:	0800070c 	.word	0x0800070c
  ldr  r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004d4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004d8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80004dc:	20000020 	.word	0x20000020

080004e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC_IRQHandler>

080004e2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <HardFault_Handler+0x4>

080004f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <MemManage_Handler+0x4>

080004fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000500:	e7fe      	b.n	8000500 <BusFault_Handler+0x4>

08000502 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000506:	e7fe      	b.n	8000506 <UsageFault_Handler+0x4>

08000508 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <SystemInit+0x60>)
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <SystemInit+0x60>)
 8000548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <SystemInit+0x64>)
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <SystemInit+0x64>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <SystemInit+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <SystemInit+0x64>)
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <SystemInit+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000574:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <SystemInit+0x64>)
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <SystemInit+0x68>)
 800057a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <SystemInit+0x64>)
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <SystemInit+0x64>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SystemInit+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800058e:	f000 f80d 	bl	80005ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <SystemInit+0x60>)
 8000594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000598:	609a      	str	r2, [r3, #8]
#endif
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	40023800 	.word	0x40023800
 80005a8:	24003010 	.word	0x24003010

080005ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005ba:	4a36      	ldr	r2, [pc, #216]	; (8000694 <SetSysClock+0xe8>)
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <SetSysClock+0xe8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <SetSysClock+0xe8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d103      	bne.n	80005e4 <SetSysClock+0x38>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005e2:	d1f0      	bne.n	80005c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <SetSysClock+0xe8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	e001      	b.n	80005fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d142      	bne.n	8000686 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000600:	4a24      	ldr	r2, [pc, #144]	; (8000694 <SetSysClock+0xe8>)
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <SetSysClock+0xe8>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800060c:	4a22      	ldr	r2, [pc, #136]	; (8000698 <SetSysClock+0xec>)
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SetSysClock+0xec>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000618:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <SetSysClock+0xe8>)
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SetSysClock+0xe8>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <SetSysClock+0xe8>)
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <SetSysClock+0xe8>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <SetSysClock+0xe8>)
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SetSysClock+0xe8>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000636:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <SetSysClock+0xe8>)
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <SetSysClock+0xf0>)
 800063c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <SetSysClock+0xe8>)
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <SetSysClock+0xe8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000648:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800064a:	bf00      	nop
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <SetSysClock+0xe8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f9      	beq.n	800064c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SetSysClock+0xf4>)
 800065a:	f240 7205 	movw	r2, #1797	; 0x705
 800065e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <SetSysClock+0xe8>)
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <SetSysClock+0xe8>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f023 0303 	bic.w	r3, r3, #3
 800066a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <SetSysClock+0xe8>)
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SetSysClock+0xe8>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000678:	bf00      	nop
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SetSysClock+0xe8>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 030c 	and.w	r3, r3, #12
 8000682:	2b08      	cmp	r3, #8
 8000684:	d1f9      	bne.n	800067a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000
 800069c:	07405419 	.word	0x07405419
 80006a0:	40023c00 	.word	0x40023c00

080006a4 <__libc_init_array>:
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	4e0d      	ldr	r6, [pc, #52]	; (80006dc <__libc_init_array+0x38>)
 80006a8:	4c0d      	ldr	r4, [pc, #52]	; (80006e0 <__libc_init_array+0x3c>)
 80006aa:	1ba4      	subs	r4, r4, r6
 80006ac:	10a4      	asrs	r4, r4, #2
 80006ae:	2500      	movs	r5, #0
 80006b0:	42a5      	cmp	r5, r4
 80006b2:	d109      	bne.n	80006c8 <__libc_init_array+0x24>
 80006b4:	4e0b      	ldr	r6, [pc, #44]	; (80006e4 <__libc_init_array+0x40>)
 80006b6:	4c0c      	ldr	r4, [pc, #48]	; (80006e8 <__libc_init_array+0x44>)
 80006b8:	f000 f818 	bl	80006ec <_init>
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	10a4      	asrs	r4, r4, #2
 80006c0:	2500      	movs	r5, #0
 80006c2:	42a5      	cmp	r5, r4
 80006c4:	d105      	bne.n	80006d2 <__libc_init_array+0x2e>
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006cc:	4798      	blx	r3
 80006ce:	3501      	adds	r5, #1
 80006d0:	e7ee      	b.n	80006b0 <__libc_init_array+0xc>
 80006d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006d6:	4798      	blx	r3
 80006d8:	3501      	adds	r5, #1
 80006da:	e7f2      	b.n	80006c2 <__libc_init_array+0x1e>
 80006dc:	08000704 	.word	0x08000704
 80006e0:	08000704 	.word	0x08000704
 80006e4:	08000704 	.word	0x08000704
 80006e8:	08000708 	.word	0x08000708

080006ec <_init>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr

080006f8 <_fini>:
 80006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fa:	bf00      	nop
 80006fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fe:	bc08      	pop	{r3}
 8000700:	469e      	mov	lr, r3
 8000702:	4770      	bx	lr
